#!/usr/bin/env python3
import asyncio
import websockets
import json
import time


async def test_validation_and_error_handling():
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
    """
    uri = "ws://localhost:8000/ws"

    try:
        print("üîó Connecting to WebSocket...")
        async with websockets.connect(uri) as websocket:
            print("‚úÖ WebSocket connected")

            # –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("\nüì§ Test 1: Sending empty data...")
            await websocket.send(b"")

            response = await websocket.recv()
            data = json.loads(response)
            print(f"üì• Response: {data}")

            if data.get("status") == "error" and "empty" in data.get("error", ""):
                print("‚úÖ Empty data validation PASSED")
            else:
                print("‚ùå Empty data validation FAILED")
                return False

            # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            print("\nüì§ Test 2: Sending large data...")
            large_data = b"x" * (1024 * 1024 + 1)  # –ë–æ–ª—å—à–µ 1MB
            await websocket.send(large_data)

            response = await websocket.recv()
            data = json.loads(response)
            print(f"üì• Response: {data}")

            if data.get("status") == "error" and "large" in data.get("error", ""):
                print("‚úÖ Large data validation PASSED")
            else:
                print("‚ùå Large data validation FAILED")
                return False

            # –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("\nüì§ Test 3: Sending valid data...")
            valid_data = b"valid audio chunk data"
            await websocket.send(valid_data)

            response = await websocket.recv()
            data = json.loads(response)
            print(f"üì• Response: {data}")

            if data.get("status") == "received" and data.get("size") == len(valid_data):
                print("‚úÖ Valid data processing PASSED")
            else:
                print("‚ùå Valid data processing FAILED")
                return False

            # –¢–µ—Å—Ç 4: –ñ–¥–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            print("\n‚è≥ Waiting for transcript...")
            start_time = time.time()

            while time.time() - start_time < 10:
                try:
                    transcript_response = await asyncio.wait_for(
                        websocket.recv(), timeout=1.0
                    )
                    data = json.loads(transcript_response)
                    print(f"üìù Received: {data}")

                    if data.get("status") == "transcript" and "text" in data:
                        print("‚úÖ Transcript processing PASSED")
                        return True

                except asyncio.TimeoutError:
                    print("‚è∞ Still waiting for transcript...")
                    continue

            print("‚ùå No transcript received within 10 seconds")
            return False

    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(test_validation_and_error_handling())
    exit(0 if success else 1)
