#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.
"""
import asyncio
import websockets
import json
import time


async def test_single_client_integration():
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ–¥–Ω–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º.
    """
    print("üîó Testing single client integration...")

    uri = "ws://localhost:8000/ws"

    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ WebSocket connected")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤
            for i in range(3):
                test_data = f"audio chunk {i}".encode()
                print(f"üì§ Sending chunk {i}: {len(test_data)} bytes")
                await websocket.send(test_data)

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = await websocket.recv()
                data = json.loads(response)
                print(f"üì• Confirmation: {data}")

                assert data["status"] == "received"
                assert data["size"] == len(test_data)

            # –ñ–¥–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã
            print("‚è≥ Waiting for transcripts...")
            transcripts_received = 0

            start_time = time.time()
            while time.time() - start_time < 15 and transcripts_received < 3:
                try:
                    transcript_response = await asyncio.wait_for(
                        websocket.recv(), timeout=2.0
                    )
                    data = json.loads(transcript_response)
                    print(f"üìù Transcript {transcripts_received + 1}: {data}")

                    if data.get("status") == "transcript" and "text" in data:
                        transcripts_received += 1

                except asyncio.TimeoutError:
                    print("‚è∞ Still waiting...")
                    continue

            print(f"‚úÖ Received {transcripts_received} transcripts")
            return transcripts_received >= 2  # –•–æ—Ç—è –±—ã 2 —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞

    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False


async def test_multiple_clients():
    """
    –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    """
    print("üîó Testing multiple clients...")

    uri = "ws://localhost:8000/ws"
    num_clients = 3
    results = []

    async def client_task(client_id):
        try:
            async with websockets.connect(uri) as websocket:
                print(f"‚úÖ Client {client_id} connected")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                test_data = f"client {client_id} audio".encode()
                await websocket.send(test_data)

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = await websocket.recv()
                data = json.loads(response)

                # –ñ–¥–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                start_time = time.time()
                while time.time() - start_time < 10:
                    try:
                        transcript_response = await asyncio.wait_for(
                            websocket.recv(), timeout=2.0
                        )
                        data = json.loads(transcript_response)

                        if data.get("status") == "transcript":
                            print(f"‚úÖ Client {client_id} received transcript")
                            return True

                    except asyncio.TimeoutError:
                        continue

                print(f"‚ùå Client {client_id} timeout")
                return False

        except Exception as e:
            print(f"‚ùå Client {client_id} error: {e}")
            return False

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [client_task(i) for i in range(num_clients)]
    results = await asyncio.gather(*tasks, return_exceptions=True)

    successful_clients = sum(1 for r in results if r is True)
    print(f"üìä Results: {successful_clients}/{num_clients} clients successful")

    return successful_clients >= 2  # –•–æ—Ç—è –±—ã 2 –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å


async def test_error_handling():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
    """
    print("üîó Testing error handling...")

    uri = "ws://localhost:8000/ws"

    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ WebSocket connected")

            # –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("üì§ Sending empty data...")
            await websocket.send(b"")

            response = await websocket.recv()
            data = json.loads(response)
            print(f"üì• Response: {data}")

            if data.get("status") == "error":
                print("‚úÖ Empty data error handling PASSED")
            else:
                print("‚ùå Empty data error handling FAILED")
                return False

            # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("üì§ Sending valid data...")
            valid_data = b"valid audio data"
            await websocket.send(valid_data)

            response = await websocket.recv()
            data = json.loads(response)
            print(f"üì• Response: {data}")

            if data.get("status") == "received":
                print("‚úÖ Valid data handling PASSED")
                return True
            else:
                print("‚ùå Valid data handling FAILED")
                return False

    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False


async def test_worker_integration():
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–æ—Ä–∫–µ—Ä–æ–º.
    """
    print("üîó Testing worker integration...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω
    import subprocess
    try:
        result = subprocess.run(
            ["docker", "ps", "--filter", "name=transcription-worker"],
            capture_output=True, text=True
        )
        if "transcription-worker" not in result.stdout:
            print("‚ùå Worker not running")
            return False
        print("‚úÖ Worker is running")
    except Exception as e:
        print(f"‚ùå Cannot check worker status: {e}")
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    uri = "ws://localhost:8000/ws"

    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ WebSocket connected")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            test_data = b"test audio for worker integration"
            print(f"üì§ Sending data: {len(test_data)} bytes")
            await websocket.send(test_data)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response = await websocket.recv()
            data = json.loads(response)
            print(f"üì• Confirmation: {data}")

            # –ñ–¥–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
            print("‚è≥ Waiting for worker transcript...")
            start_time = time.time()

            while time.time() - start_time < 10:
                try:
                    transcript_response = await asyncio.wait_for(
                        websocket.recv(), timeout=2.0
                    )
                    data = json.loads(transcript_response)
                    print(f"üìù Worker transcript: {data}")

                    if data.get("status") == "transcript" and "text" in data:
                        if "Transcribed:" in data["text"]:
                            print("‚úÖ Worker integration PASSED")
                            return True

                except asyncio.TimeoutError:
                    print("‚è∞ Still waiting for worker...")
                    continue

            print("‚ùå No worker transcript received")
            return False

    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False


async def run_all_integration_tests():
    """
    –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    print("üöÄ Starting integration tests...\n")

    tests = [
        ("Single Client Integration", test_single_client_integration),
        ("Multiple Clients", test_multiple_clients),
        ("Error Handling", test_error_handling),
        ("Worker Integration", test_worker_integration)
    ]

    results = []

    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"Running: {test_name}")
        print(f"{'='*50}")

        try:
            result = await test_func()
            results.append((test_name, result))

            if result:
                print(f"‚úÖ {test_name}: PASSED")
            else:
                print(f"‚ùå {test_name}: FAILED")

        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("INTEGRATION TEST RESULTS")
    print(f"{'='*50}")

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name}: {status}")

    print(f"\nüìä Overall: {passed}/{total} tests passed")

    return passed == total


if __name__ == "__main__":
    success = asyncio.run(run_all_integration_tests())
    exit(0 if success else 1)
