#!/usr/bin/env python3
import asyncio
import websockets
import json
import time


async def test_worker_integration():
    """
    –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: WebSocket -> Redis -> Worker -> Transcript
    """
    uri = "ws://localhost:8000/ws"
    
    try:
        print("üîó Connecting to WebSocket...")
        async with websockets.connect(uri) as websocket:
            print("‚úÖ WebSocket connected")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            test_audio = b"test audio chunk for worker processing"
            print(f"üì§ Sending audio chunk: {len(test_audio)} bytes")
            await websocket.send(test_audio)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response = await websocket.recv()
            print(f"üì• Received confirmation: {response}")
            
            # –ñ–¥–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
            print("‚è≥ Waiting for transcript...")
            start_time = time.time()
            
            while time.time() - start_time < 10:
                try:
                    transcript_response = await asyncio.wait_for(
                        websocket.recv(), timeout=1.0
                    )
                    data = json.loads(transcript_response)
                    print(f"üìù Received transcript: {data}")
                    
                    if "text" in data:
                        print("‚úÖ Worker integration test PASSED!")
                        return True
                        
                except asyncio.TimeoutError:
                    print("‚è∞ Still waiting for transcript...")
                    continue
                    
            print("‚ùå No transcript received within 10 seconds")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(test_worker_integration())
    exit(0 if success else 1) 